{:rename-macros {}, :renames {}, :externs {CodeMirror {}, Object {}}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, $ reagent.interop}, :excludes #{}, :name andel.lexer, :imports nil, :requires {core.async cljs.core.async, cljs.core.async cljs.core.async}, :cljs.spec/speced-vars [], :uses nil, :defs {modespec->mode {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljs/andel/lexer.cljs", :line 6, :column 8, :end-line 6, :end-column 22, :private true, :arglists (quote ([modespec]))}, :private true, :name andel.lexer/modespec->mode, :variadic false, :file "src/cljs/andel/lexer.cljs", :end-column 22, :method-params ([modespec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([modespec]))}, copy-state {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljs/andel/lexer.cljs", :line 9, :column 8, :end-line 9, :end-column 18, :private true, :arglists (quote ([mode state]))}, :private true, :name andel.lexer/copy-state, :variadic false, :file "src/cljs/andel/lexer.cljs", :end-column 18, :method-params ([mode state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([mode state]))}, style->keyword {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljs/andel/lexer.cljs", :line 26, :column 7, :end-line 26, :end-column 21, :arglists (quote ([style]))}, :name andel.lexer/style->keyword, :variadic false, :file "src/cljs/andel/lexer.cljs", :end-column 21, :method-params ([style]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([style]))}, lex {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljs/andel/lexer.cljs", :line 30, :column 7, :end-line 30, :end-column 10, :arglists (quote ([modespec text initial-state]))}, :name andel.lexer/lex, :variadic false, :file "src/cljs/andel/lexer.cljs", :end-column 10, :method-params ([modespec text initial-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([modespec text initial-state]))}, submit-request! {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljs/andel/lexer.cljs", :line 43, :column 7, :end-line 43, :end-column 22, :arglists (quote ([{:keys [input], :as worker} {:keys [index text], :as req}]))}, :name andel.lexer/submit-request!, :variadic false, :file "src/cljs/andel/lexer.cljs", :end-column 22, :method-params ([p__64189 p__64190]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [input], :as worker} {:keys [index text], :as req}]))}, new-lexer-worker {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljs/andel/lexer.cljs", :line 46, :column 7, :end-line 46, :end-column 23, :arglists (quote ([modespec]))}, :name andel.lexer/new-lexer-worker, :variadic false, :file "src/cljs/andel/lexer.cljs", :end-column 23, :method-params ([modespec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([modespec]))}}, :cljs.spec/registry-ref [], :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent.interop reagent.interop}, :cljs.analyzer/constants {:seen #{:modespec :index :else :recur :state :output :tokens :input :text}, :order [:tokens :state :input :index :text :recur :else :output :modespec]}, :doc nil}