{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{remove replace next}, :name andel.fast-zip, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {rightmost {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 167, :column 7, :end-line 167, :end-column 16, :arglists (quote ([loc])), :doc "Returns the loc of the rightmost sibling of the node at this loc, or self"}, :name andel.fast-zip/rightmost, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 16, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the rightmost sibling of the node at this loc, or self"}, insert-child {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 229, :column 7, :end-line 229, :end-column 19, :arglists (quote ([loc item])), :doc "Inserts the item as the leftmost child of the node at this loc, without moving"}, :name andel.fast-zip/insert-child, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the leftmost child of the node at this loc, without moving"}, path {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 82, :column 7, :end-line 82, :end-column 11, :arglists (quote ([loc])), :doc "Returns a seq of nodes leading to this loc"}, :name andel.fast-zip/path, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of nodes leading to this loc"}, append-child {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 234, :column 7, :end-line 234, :end-column 19, :arglists (quote ([loc item])), :doc "Inserts the item as the rightmost child of the node at this loc, without moving"}, :name andel.fast-zip/append-child, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the rightmost child of the node at this loc, without moving"}, map->ZipperOps {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 18, :column 12, :end-line 18, :end-column 21, :internal-ctor true, :factory :map, :arglists (quote ([G__62983]))}, :name andel.fast-zip/map->ZipperOps, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 21, :method-params ([G__62983]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__62983]))}, ->ZipperOps {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 18, :column 12, :end-line 18, :end-column 21, :internal-ctor true, :factory :positional, :arglists (quote ([branch? children make-node reducing-fn metrics-fn leaf-overflown? split-thresh split-leaf leaf-underflown? merge-leafs]))}, :name andel.fast-zip/->ZipperOps, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 21, :method-params ([branch? children make-node reducing-fn metrics-fn leaf-overflown? split-thresh split-leaf leaf-underflown? merge-leafs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 18, :end-line 18, :max-fixed-arity 10, :fn-var true, :arglists (quote ([branch? children make-node reducing-fn metrics-fn leaf-overflown? split-thresh split-leaf leaf-underflown? merge-leafs]))}, branch? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 66, :column 7, :end-line 66, :end-column 14, :arglists (quote ([loc])), :doc "Returns true if the node at loc is a branch"}, :name andel.fast-zip/branch?, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 14, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns true if the node at loc is a branch"}, children {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 71, :column 7, :end-line 71, :end-column 15, :arglists (quote ([loc])), :doc "Returns a seq of the children of node at loc, which must be a branch"}, :name andel.fast-zip/children, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 15, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the children of node at loc, which must be a branch"}, remove {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 244, :column 7, :end-line 244, :end-column 13, :arglists (quote ([loc])), :doc "Removes the node at loc, returning the loc that would have preceded it in a depth-first walk."}, :name andel.fast-zip/remove, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Removes the node at loc, returning the loc that would have preceded it in a depth-first walk."}, down {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 97, :column 7, :end-line 97, :end-column 11, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children"}, :name andel.fast-zip/down, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the leftmost child of the node at this loc,\n  or nil if no children"}, assoc-acc {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 38, :column 7, :end-line 38, :end-column 16, :arglists (quote ([path acc]))}, :name andel.fast-zip/assoc-acc, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 16, :method-params ([path acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path acc]))}, map->ZipperPath {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 29, :column 12, :end-line 29, :end-column 22, :internal-ctor true, :factory :map, :arglists (quote ([G__62993]))}, :name andel.fast-zip/map->ZipperPath, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 22, :method-params ([G__62993]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__62993]))}, ->ZipperLocation {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 31, :column 12, :end-line 31, :end-column 26, :internal-ctor true, :factory :positional, :arglists (quote ([ops node path]))}, :name andel.fast-zip/->ZipperLocation, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 26, :method-params ([ops node path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ops node path]))}, replace {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 218, :column 7, :end-line 218, :end-column 14, :arglists (quote ([loc node])), :doc "Replaces the node at this loc, without moving"}, :name andel.fast-zip/replace, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 14, :method-params ([loc node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc node])), :doc "Replaces the node at this loc, without moving"}, end? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 239, :column 7, :end-line 239, :end-column 11, :arglists (quote ([loc])), :doc "Returns true if loc represents the end of a depth-first walk"}, :name andel.fast-zip/end?, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns true if loc represents the end of a depth-first walk"}, acc {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 61, :column 7, :end-line 61, :end-column 10, :arglists (quote ([loc])), :doc "Returns the acc at loc"}, :name andel.fast-zip/acc, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 10, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the acc at loc"}, edit {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 295, :column 7, :end-line 295, :end-column 11, :arglists (quote ([loc f & args])), :doc "Replaces the node at this loc with the value of (f node args)", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(loc f args)], :arglists ([loc f & args]), :arglists-meta (nil)}}, :name andel.fast-zip/edit, :variadic true, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(loc f args)], :arglists ([loc f & args]), :arglists-meta (nil)}, :method-params [(loc f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists ([loc f & args]), :doc "Replaces the node at this loc with the value of (f node args)"}, update-path {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 33, :column 7, :end-line 33, :end-column 18, :arglists (quote ([loc f]))}, :name andel.fast-zip/update-path, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 18, :method-params ([loc f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc f]))}, ->ZipperPath {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 29, :column 12, :end-line 29, :end-column 22, :internal-ctor true, :factory :positional, :arglists (quote ([l r ppath pnodes changed? acc o-acc]))}, :name andel.fast-zip/->ZipperPath, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 22, :method-params ([l r ppath pnodes changed? acc o-acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 29, :end-line 29, :max-fixed-arity 7, :fn-var true, :arglists (quote ([l r ppath pnodes changed? acc o-acc]))}, make-node {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 76, :column 7, :end-line 76, :end-column 16, :arglists (quote ([loc node children])), :doc "Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor."}, :name andel.fast-zip/make-node, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 16, :method-params ([loc node children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([loc node children])), :doc "Returns a new branch node, given an existing node and new children.\n  The loc is only used to supply the constructor."}, node {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 56, :column 7, :end-line 56, :end-column 11, :arglists (quote ([loc])), :doc "Returns the node at loc"}, :name andel.fast-zip/node, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the node at loc"}, up {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 116, :column 7, :end-line 116, :end-column 9, :arglists (quote ([loc])), :doc "Returns the loc of the parent of the node at this loc, or nil if at the top"}, :name andel.fast-zip/up, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 9, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the parent of the node at this loc, or nil if at the top"}, insert-right {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 202, :column 7, :end-line 202, :end-column 19, :arglists (quote ([loc item])), :doc "Inserts the item as the right sibling of the node at this loc, without moving"}, :name andel.fast-zip/insert-right, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 19, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the right sibling of the node at this loc, without moving"}, map->ZipperLocation {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 31, :column 12, :end-line 31, :end-column 26, :internal-ctor true, :factory :map, :arglists (quote ([G__63003]))}, :name andel.fast-zip/map->ZipperLocation, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 26, :method-params ([G__63003]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__63003]))}, ZipperLocation {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name andel.fast-zip/ZipperLocation, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 26, :type true, :column 12, :internal-ctor true, :line 31, :record true, :end-line 31, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, rights {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 92, :column 7, :end-line 92, :end-column 13, :arglists (quote ([loc])), :doc "Returns a seq of the right siblings of this loc"}, :name andel.fast-zip/rights, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the right siblings of this loc"}, root {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 140, :column 7, :end-line 140, :end-column 11, :arglists (quote ([loc])), :doc "zips all the way up and returns the root node, reflecting any changes."}, :name andel.fast-zip/root, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "zips all the way up and returns the root node, reflecting any changes."}, ZipperOps {:num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name andel.fast-zip/ZipperOps, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 21, :type true, :column 12, :internal-ctor true, :line 18, :record true, :end-line 18, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, insert-left {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 185, :column 7, :end-line 185, :end-column 18, :arglists (quote ([loc item])), :doc "Inserts the item as the left sibling of the node at this loc, without moving"}, :name andel.fast-zip/insert-left, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 18, :method-params ([loc item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc item])), :doc "Inserts the item as the left sibling of the node at this loc, without moving"}, right {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 150, :column 7, :end-line 150, :end-column 12, :arglists (quote ([loc])), :doc "Returns the loc of the right sibling of the node at this loc, or nil"}, :name andel.fast-zip/right, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns the loc of the right sibling of the node at this loc, or nil"}, lefts {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 87, :column 7, :end-line 87, :end-column 12, :arglists (quote ([loc])), :doc "Returns a seq of the left siblings of this loc"}, :name andel.fast-zip/lefts, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Returns a seq of the left siblings of this loc"}, assoc-o-acc {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([path o-acc]))}, :name andel.fast-zip/assoc-o-acc, :variadic false, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 18, :method-params ([path o-acc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([path o-acc]))}, ZipperPath {:num-fields 7, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name andel.fast-zip/ZipperPath, :file "/home/pavelsergeev/work/andel/src/cljc/andel/fast_zip.cljc", :end-column 22, :type true, :column 12, :internal-ctor true, :line 29, :record true, :end-line 29, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:path :ppath :branch? :children :r reducing-fn path ppath branch? :acc children r :o-acc :node :make-node :ops :l acc :leaf-underflown? :split-thresh o-acc make-node :pnodes node :merge-leafs :changed? ops l :split-leaf :leaf-overflown? leaf-underflown? :metrics-fn split-thresh :tag :end :reducing-fn ZipperOps pnodes merge-leafs changed? ZipperPath split-leaf metrics-fn leaf-overflown?}, :order [:branch? :children :make-node :reducing-fn :metrics-fn :leaf-overflown? :split-thresh :split-leaf :leaf-underflown? :merge-leafs branch? children make-node reducing-fn metrics-fn leaf-overflown? split-thresh split-leaf leaf-underflown? merge-leafs :l :r :ppath :pnodes :changed? :acc :o-acc l r ppath pnodes changed? acc o-acc :ops :node :path ops :tag ZipperOps node path ZipperPath :end]}, :doc "Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet"}