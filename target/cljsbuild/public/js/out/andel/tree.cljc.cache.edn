{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove replace next}, :name andel.tree, :imports nil, :requires {z clojure.zip, clojure.zip clojure.zip, fz andel.fast-zip, andel.fast-zip andel.fast-zip}, :cljs.spec/speced-vars [], :uses nil, :defs {map->Leaf {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 8, :column 12, :end-line 8, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__63039]))}, :name andel.tree/map->Leaf, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([G__63039]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__63039]))}, split-children {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 74, :column 7, :end-line 74, :end-column 21, :arglists (quote ([children config]))}, :name andel.tree/split-children, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 21, :method-params ([children config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children config]))}, loc-acc {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 94, :column 7, :end-line 94, :end-column 14, :arglists (quote ([loc]))}, :name andel.tree/loc-acc, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 14, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, insert-child {:name andel.tree/insert-child, :file "src/cljc/andel/tree.cljc", :line 250, :column 1, :end-line 250, :end-column 18, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 250, :column 6, :end-line 250, :end-column 18}}, skip {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 232, :column 7, :end-line 232, :end-column 11, :arglists (quote ([loc])), :doc "Just like next but not going down"}, :name andel.tree/skip, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Just like next but not going down"}, branch? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 215, :column 7, :end-line 215, :end-column 14, :arglists (quote ([loc]))}, :name andel.tree/branch?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 14, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, shrink-tree {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 163, :column 7, :end-line 163, :end-column 18, :arglists (quote ([node]))}, :name andel.tree/shrink-tree, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 18, :method-params ([node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([node]))}, children {:name andel.tree/children, :file "src/cljc/andel/tree.cljc", :line 247, :column 1, :end-line 247, :end-column 14, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 247, :column 6, :end-line 247, :end-column 14}}, remove {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 325, :column 7, :end-line 325, :end-column 13, :arglists (quote ([loc]))}, :name andel.tree/remove, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 13, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, down {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 194, :column 7, :end-line 194, :end-column 11, :arglists (quote ([loc]))}, :name andel.tree/down, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, root? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 259, :column 7, :end-line 259, :end-column 12, :arglists (quote ([loc]))}, :name andel.tree/root?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, split-needed? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 66, :column 7, :end-line 66, :end-column 20, :arglists (quote ([children config]))}, :name andel.tree/split-needed?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 20, :method-params ([children config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children config]))}, partition-binary {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 52, :column 7, :end-line 52, :end-column 23, :arglists (quote ([s thresh]))}, :name andel.tree/partition-binary, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 23, :method-params ([s thresh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s thresh]))}, next-leaf {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 252, :column 7, :end-line 252, :end-column 16, :arglists (quote ([loc]))}, :name andel.tree/next-leaf, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, merge-needed? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 100, :column 7, :end-line 100, :end-column 20, :arglists (quote ([children config]))}, :name andel.tree/merge-needed?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 20, :method-params ([children config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children config]))}, grow-tree {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 155, :column 7, :end-line 155, :end-column 16, :arglists (quote ([children config]))}, :name andel.tree/grow-tree, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([children config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children config]))}, reset {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 263, :column 7, :end-line 263, :end-column 12, :arglists (quote ([loc]))}, :name andel.tree/reset, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, replace {:name andel.tree/replace, :file "src/cljc/andel/tree.cljc", :line 249, :column 1, :end-line 249, :end-column 13, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 249, :column 6, :end-line 249, :end-column 13}}, zipper {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 31, :column 7, :end-line 31, :end-column 13, :arglists (quote ([tree {:keys [reducing-fn metrics-fn leaf-overflown? split-thresh split-leaf leaf-underflown? merge-leafs], :as config}]))}, :name andel.tree/zipper, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 13, :method-params ([tree p__63052]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tree {:keys [reducing-fn metrics-fn leaf-overflown? split-thresh split-leaf leaf-underflown? merge-leafs], :as config}]))}, end? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 200, :column 7, :end-line 200, :end-column 11, :arglists (quote ([loc]))}, :name andel.tree/end?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, fast-some {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 60, :column 7, :end-line 60, :end-column 16, :arglists (quote ([pred coll]))}, :name andel.tree/fast-some, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll]))}, edit {:name andel.tree/edit, :file "src/cljc/andel/tree.cljc", :line 248, :column 1, :end-line 248, :end-column 10, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 248, :column 6, :end-line 248, :end-column 10}}, ->Leaf {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 8, :column 12, :end-line 8, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([metrics data]))}, :name andel.tree/->Leaf, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([metrics data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([metrics data]))}, make-leaf {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 14, :column 7, :end-line 14, :end-column 16, :arglists (quote ([data {:keys [metrics-fn]}]))}, :name andel.tree/make-leaf, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([data p__63048]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data {:keys [metrics-fn]}]))}, map->Node {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 6, :column 12, :end-line 6, :end-column 16, :internal-ctor true, :factory :map, :arglists (quote ([G__63029]))}, :name andel.tree/map->Node, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([G__63029]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__63029]))}, make-node {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([children {:keys [reducing-fn]}]))}, :name andel.tree/make-node, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([children p__63045]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children {:keys [reducing-fn]}]))}, node {:name andel.tree/node, :file "src/cljc/andel/tree.cljc", :line 214, :column 1, :end-line 214, :end-column 10, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 214, :column 6, :end-line 214, :end-column 10}}, up {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 170, :column 7, :end-line 170, :end-column 9, :arglists (quote ([loc]))}, :name andel.tree/up, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 9, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, insert-right {:name andel.tree/insert-right, :file "src/cljc/andel/tree.cljc", :line 246, :column 1, :end-line 246, :end-column 18, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 246, :column 6, :end-line 246, :end-column 18}}, ->Node {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 6, :column 12, :end-line 6, :end-column 16, :internal-ctor true, :factory :positional, :arglists (quote ([metrics children]))}, :name andel.tree/->Node, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 16, :method-params ([metrics children]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([metrics children]))}, Leaf {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name andel.tree/Leaf, :file "src/cljc/andel/tree.cljc", :end-column 16, :type true, :column 12, :internal-ctor true, :line 8, :record true, :end-line 8, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, root {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 203, :column 7, :end-line 203, :end-column 11, :arglists (quote ([loc])), :doc "Modified version of clojure.zip/root to work with balancing version of up"}, :name andel.tree/root, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Modified version of clojure.zip/root to work with balancing version of up"}, next {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 218, :column 7, :end-line 218, :end-column 11, :arglists (quote ([loc])), :doc "Modified version of clojure.zip/next to work with balancing version of up"}, :name andel.tree/next, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 11, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc])), :doc "Modified version of clojure.zip/next to work with balancing version of up"}, merge-children {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 109, :column 7, :end-line 109, :end-column 21, :arglists (quote ([children config]))}, :name andel.tree/merge-children, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 21, :method-params ([children config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children config]))}, leaf? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 27, :column 27, :end-line 27, :end-column 32, :tag boolean, :arglists (quote ([x]))}, :name andel.tree/leaf?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 32, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 12, :line 27, :ret-tag boolean, :end-line 27, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, push! {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 267, :column 7, :end-line 267, :end-column 12, :arglists (quote ([a x]))}, :name andel.tree/push!, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 12, :method-params ([a x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a x]))}, balance-children {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 150, :column 7, :end-line 150, :end-column 23, :arglists (quote ([children config]))}, :name andel.tree/balance-children, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 23, :method-params ([children config]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([children config]))}, insert-left {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 319, :column 7, :end-line 319, :end-column 18, :arglists (quote ([loc x]))}, :name andel.tree/insert-left, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 18, :method-params ([loc x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc x]))}, right {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 184, :column 7, :end-line 184, :end-column 12, :arglists (quote ([loc]))}, :name andel.tree/right, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 12, :method-params ([loc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([loc]))}, node? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 24, :column 27, :end-line 24, :end-column 32, :tag boolean, :arglists (quote ([x]))}, :name andel.tree/node?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 32, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 12, :line 24, :ret-tag boolean, :end-line 24, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}, root-path {:name andel.tree/root-path, :file "src/cljc/andel/tree.cljc", :line 29, :column 1, :end-line 29, :end-column 15, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 29, :column 6, :end-line 29, :end-column 15}, :tag any}, nodes? {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 63, :column 7, :end-line 63, :end-column 13, :arglists (quote ([c]))}, :name andel.tree/nodes?, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 13, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c]))}, scan {:protocol-inline nil, :meta {:file "/home/pavelsergeev/work/andel/src/cljc/andel/tree.cljc", :line 271, :column 7, :end-line 271, :end-column 11, :arglists (quote ([loc pred]))}, :name andel.tree/scan, :variadic false, :file "src/cljc/andel/tree.cljc", :end-column 11, :method-params ([loc pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 2, :fn-var true, :arglists (quote ([loc pred]))}, Node {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name andel.tree/Node, :file "src/cljc/andel/tree.cljc", :end-column 16, :type true, :column 12, :internal-ctor true, :line 6, :record true, :end-line 6, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:children :r metrics data :else children :leaf-underflown? :split-thresh :root :merge-leafs :changed? :split-leaf :leaf-overflown? :metrics-fn :end :reducing-fn :metrics :data}, :order [:metrics :children metrics children :data data :reducing-fn :metrics-fn :root :leaf-overflown? :split-thresh :split-leaf :leaf-underflown? :merge-leafs :else :end :r :changed?]}, :doc nil}